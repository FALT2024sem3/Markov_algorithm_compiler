#include <string>
#include <sstream>
#include <iostream>
#include <fstream>
#include <vector>
#include <list>
#include <memory>
 
COMPILER Prog

enum Operator{ SUB };
enum NodeType{ StringValueLiteral };

class Node{  
  virtual const char* getMsg() { return "ParentClass"; }
    };

class Factor : public Node{
  public:
    std::wstring* value;
    Factor(std::wstring e) {
      value = new std::wstring(e);
    }
};

class term : public Node{
  public:
    term(){}
    Operator op;
    std::wstring left;
    std::wstring right;
    
    term(std::wstring f1, Operator o, std::wstring f2) { op = o; left = f1; right = f2; }
};

class Block : public Node{
    std::vector<term> children_of_Block;
  public:
  
};

class SyntaxTree{
  public:
    inline static std::vector<Node*> children_of_root;
 static  void add(Node* n){
   children_of_root.push_back(n); 
   std::cout<<"ADD"<<std::endl;
  }
};
 
IGNORECASE
CHARACTERS

leter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
digit = "0123456789".
verbatimStringChar = ANY - '"'.
cr  = '\r'.
lf  = '\n'.
tab = '\t'.
 
TOKENS

ident = leter {leter | digit | "_"}.
string = "\"" {verbatimStringChar} "\"".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO cr lf
 
IGNORE cr + lf + tab
 
PRODUCTIONS


  Prog (. std::wstring str; .) = (. std::wstring s,s1,s2,s3,s4; Node* n; term t, t1; .) Expr <s, t> {Expr <s1, t1>}
                                  (.n = &t; SyntaxTree::add(n); .).

 
  Expr <std::wstring &str, term& t> = (. std::wstring s; term t1; .) 
                               Term<s, t1> ";"  (. str=s; t = t1; .)
                              (.
                                        std::wofstream outfile ("out.txt", std::ios_base::out);
                                        outfile << str << std::endl;          
                                        outfile.close();
                              .).

  
  Term<std::wstring &str, term& t> = (. std::wstring s1, s2;  Node* N; .) Word<s1> "->" Word<s2> 
                                                           (. 
                                                              t = term(s1, Operator(Operator::SUB), s2);
                                                            .).
  
  Word<std::wstring &str> = string (. str=t->val; .).
  
  
  
END Prog.  