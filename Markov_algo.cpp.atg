#include <string>
#include <sstream>
#include <iostream>
#include <fstream>
#include <vector>
#include "AST.h"

COMPILER Root

IGNORECASE
CHARACTERS

leter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
digit = "0123456789".
verbatimStringChar = ANY - '"'.
cr  = '\r'.
lf  = '\n'.
tab = '\t'.
 
TOKENS

ident = leter {leter | digit | "_"}.
string = "\"" {verbatimStringChar} "\"".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf
 
IGNORE cr + lf + tab
 
PRODUCTIONS
  
  Root                                               = "DAFE" Block<ParseTree::AST::Root> .

  Block <ParseTree::Block& B>                        = (. ParseTree::Stat* s; .) "{" {Stat<s, B>} "}".


  Stat <ParseTree::Stat*& s, ParseTree::Block& B>    = (. ParseTree::Stat* ss; 
                                                          ParseTree::BinExpr* b; 
                                                          std::vector<ParseTree::Expr*> se;
                                                          ParseTree::Block* bl = new ParseTree::Block();
                                                          ParseTree::Block* bl2 = new ParseTree::Block(); 
                                                          ParseTree::IfElse IF;
                                                          .) 
                                ( Block<*bl>  (. ss = dynamic_cast<ParseTree::Stat*>(bl);
                                                 .) 
                                | Term<b> (. 
                                  ss = dynamic_cast<ParseTree::Stat*>(b);
                                  .)
                                | "if" "(" Condition<IF> ")" Block<*bl> ["else" Block<*bl2>](.
                                  ss = dynamic_cast<ParseTree::Stat*>(new ParseTree::IfElse(IF.GetCond(), bl, bl2)); 
                                  .)                           
                                ) (.
                                  B.add(ss);
                                  .).

Condition <ParseTree::IfElse& conds> = (.
                                              ParseTree::Expr *ss, *opPtr;
                                              ParseTree::SinglExpr se1, se2;
                                              ParseTree::LogOp op;
                                            .)
                                            SinglExpr<se1>(.
                                            ss = dynamic_cast<ParseTree::Expr*>(new ParseTree::SinglExpr(se1)); 
                                            conds.AddCond(ss);
                                            .)         
                                            { (Or (. op = ParseTree::Operator::OR; .)
                                            | And (. op = ParseTree::Operator::AND; .) ) SinglExpr<se2>
                                            (. 
                                                opPtr = dynamic_cast<ParseTree::Expr*>(new ParseTree::LogOp(op));
                                                conds.AddCond(opPtr);
                                                ss = dynamic_cast<ParseTree::Expr*>(new ParseTree::SinglExpr(se2)); 
                                                conds.AddCond(ss);
                                             .)
                                            }.

SinglExpr <ParseTree::SinglExpr& se>    = (.
                                            std::wstring s;
                                            ParseTree::Operator op = ParseTree::Operator::EXIST; 
                                          .) 
                                        [Not(. op = ParseTree::Operator::NOT; .)] Word<s> (. se = ParseTree::SinglExpr(op, s); .).
  
Term <ParseTree::BinExpr*& b> = (. 
                                   std::wstring s1, s2;
                                 .)
                                  Word<s1> SubOp Word<s2> ";"
                                  (.
                                  b = new ParseTree::BinExpr(s1, ParseTree::Operator::SUB , s2); 
                                  .).

Not   = "not".
Or    = "or".
And   = "and".
SubOp = "->".


Word<std::wstring &str>      = string (. str=t->val; .).

END Root.  